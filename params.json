{"name":"The","tagline":"chai.js/should.js like python lib.","body":"# A python assertion module for better assertion.\r\n\r\ninspired by should.js and chai.js\r\n\r\n# install\r\n```shell\r\npip install the\r\n```\r\n\r\n# API\r\nIt provides one object called `the` with an alias `expect`.\r\n(Take a look at the Usage and Example.)\r\n\r\n```python\r\nfrom the import the, expect\r\n```\r\n\r\n### Chains\r\n> do nothing but return itself.\r\n\r\n* `should`\r\n* `have`\r\n* `to`\r\n* `when`\r\n\r\n##### More chains?\r\n```python\r\nthe.use(\"mychain\")\r\n```\r\n\r\n### Matchers without arg\r\n> trigger a certain assertion.\r\n\r\n* `true`\r\n* `false`\r\n* `none`\r\n* `exist`\r\n* `ok`\r\n* `empty`\r\n\r\n##### More?\r\n> take a look at the-easytype lib.\r\n\r\n```python\r\n# define your matcher\r\ndef happy(self):\r\n    return self._check(self.obj == \"happy\",\r\n                       self.obj + \" is happy.\",\r\n                       self.obj + \" is not happy.\")\r\n\r\n# add to `the`\r\nthe.use(happy)\r\n\r\n# DONE!\r\nthe(string).should.be.happy\r\n```\r\n\r\n### Matchers with args\r\n> trigger a certain assertion\r\n\r\n* `eq(other)`, `equal(other)`.  assert equal(==)  \r\n@param: other {mixed}\r\n\r\n* `lt(other)`, `below(other)`.  assert less than(<)  \r\n@param: other {mixed}\r\n\r\n* `gt(other)`, `above(other)`. assert greater than(<)  \r\n@param: other {mixed}\r\n \r\n* `ne(other)`. assert not equal(!=)  \r\n@param: other {mixed}\r\n\r\n* `le(other)`. assert less than or equal to (>=).  \r\n@param: other {mixed}\r\n\r\n* `ge(other)`. assert greater than(>=).   \r\n@param: other {mixed}\r\n\r\n* `match(regex)`. assert string match a regex.  \r\n@param: regex {mixed}\r\n\r\n* `length(n)`, `size(n)`. assert length.  \r\n@param: n {int}\r\n\r\n* `item(**kwargs)`, `items(**kwargs)`. assert dict have item(s).  \r\n@params: **kwargs\r\n\r\n* `contain(other)`. assert a dict contains another dict.  \r\n@param: other {dict}\r\n\r\n* `key(*args)`, `keys(*args)`. assert dict has key(s).  \r\n@params: args\r\n\r\n* `value(*args)`, `values(*args)`. assert dict has value(s).  \r\n@params: args\r\n\r\n* `property(**kwargs)`, `properties(**kwargs)`. assert object has property/properties.  \r\n@params: args\r\n\r\n* `include(item)`. assert container include item (in).  \r\n@param:  item {mixed}\r\n\r\n* `within(container)`. assert item in container (in).   \r\n@param: container {mixed}\r\n\r\n* `inherit(parent)`. assert subclass.  \r\n@param:  parent {class}\r\n\r\n* `method(m)`. assert object has method.  \r\n@param: m {str}\r\n\r\n* `result(r)`. assert function return value. Using `apply` to apply args   \r\n@param: r {mixed}\r\n\r\n* `throw(msg=None, ex=Exception)` . assert function throw exception using `apply` to apply args  \r\n@param: msg {regex} optional  \r\n@param: ex {exception} optional\r\n\r\n* `exception(msg=None, ex=Exception)` assert exception throw **classmethod**  \r\n@param: msg {regex} optional  \r\n@param: ex {exception} optional\r\n\r\n##### More?\r\n> take a look at the-fs lib.\r\n\r\n```python\r\n# define your matcher\r\ndef firstname(self, name):\r\n      fname = self.obj.split()[0]\r\n      return self._check(fname == name,\r\n                         \"The firstname of {} is {}\".format(self.obj, name),\r\n                         \"The firstname of {} is not {}\".format(self.obj, name))\r\n\r\n# add to `the`\r\nthe.use(firname)\r\n\r\n# DONE!\r\nexpect(\"Wenjun Yan\").to.have.firstname(\"Wenjun\")\r\n```\r\n\r\n### Magic methods\r\n* `==`\r\n* `!=`\r\n* `>=`\r\n* `<=`\r\n* `>`\r\n* `<`\r\n* `1 in the(range(1, 3))`\r\n\r\n### Negations\r\n\r\n* `NOT`\r\n* `not_to`\r\n* `should_not`\r\n\r\n\r\n# Usage and Examples\r\n\r\n### assert `>`, `<`, `>=`, `<=`, `==`\r\n\r\n```python\r\nexpect(1) > 0\r\nexpect(1).gt(0)\r\nexpect(1).above(0)\r\n\r\nexpect(1) >= 0\r\nexpect(1).ge(0)\r\n\r\nexpect(1) < 2\r\nexpect(1).lt(0)\r\nexpect(1).below(0)\r\n\r\nexpect(1) <= 2\r\nexpect(1).le(0)\r\n\r\nexpect(1) == 1\r\nexpect(1).eq(1)\r\nexpect(1).equal(1)\r\n```\r\n\r\n### assert `True`, `False`, `None`\r\n```python\r\nthe(True).should.be.true\r\nexpect(True).to.be.true\r\n\r\nthe(False).should.be.false\r\nexpect(False).to.be.false\r\n\r\nthe(None).should.be.none\r\nexpect(None).to.be.none\r\n```\r\n\r\n### assert `truthy`, `falsy`\r\n```python\r\nthe(1).should.be.ok\r\nexpect(1).to.be.ok\r\n\r\nthe(\"\").should.be.empty\r\nexpect(\"\").to.be.empty\r\n```\r\n\r\n### assert `is`\r\n```python\r\nthe(1).should.be(1)\r\nexpect(1).to.be(1)\r\n```\r\n\r\n### assert `isinstance`\r\n```python\r\nthe(1).should.be.an(int)\r\nexpect(\"1\").to.be.a(str)\r\n```\r\n\r\n### assert `issubclass`\r\n```python\r\nthe(int).should.inherit(object)\r\nexpect(int).to.inherit(object)\r\n```\r\n\r\n### assert `in`\r\n```python\r\nthe(1).should.be.within(range(1,3))\r\nexpect(1).to.be.within(range(1,3))\r\n```\r\n\r\n### assert `len`\r\n```python\r\nthe(range(1, 3)).should.have.length(3)\r\nexpect(range(1, 3)).to.have.length(3)\r\n```\r\n\r\n### assert `regexp`\r\n```python\r\nthe(\"abc\").should.match(\"a\")\r\nexpect(\"abc\").to.match(\"a\")\r\n```\r\n\r\n### assert `dict.item`\r\n```python\r\nd = {a: 1, b: 2}\r\nthe(d).should.have.items(a=1, b=2)\r\nexpect(d).to.have.items(a=1, b=2)\r\n\r\nthe(d).should.contain({\"a\": 1, \"b\": 2})\r\nexpect(d).to.contain({\"a\": 1, \"b\": 2})\r\n```\r\n\r\n### assert `dict.key`\r\n```python\r\nd = {a: 1, b: 2}\r\nthe(d).should.have.key(\"a\")\r\nexpect(d).to.have.keys(\"a\", \"b\")\r\n```\r\n\r\n### assert `dict.value`\r\n```python\r\nd = {a: 1, b: 2}\r\nthe(d).should.have.value(1)\r\nexpect(d).to.have.values(1, 2)\r\n```\r\n\r\n### assert `property`\r\n```python\r\nclass A(object):\r\n    def __init__(self):\r\n        self.x = 1\r\n\r\n    def getx(self):\r\n        return self.x\r\n\r\nexpect(A()).to.have.property(\"x\")\r\nexpect(A()).to.have.property(x=1)\r\n```\r\n\r\n### assert `method`\r\n```python\r\nclass A(object):\r\n    def __init__(self):\r\n        self.x = 1\r\n\r\n    def getx(self):\r\n        return self.x\r\n\r\nexpect(A()).to.have.method(\"getx\")\r\nthe(A()).should.have.method(\"getx\")\r\n```\r\n\r\n### assert `function`\r\n```python\r\ndef div(a, b):\r\n    return a/b\r\n\r\nexpect(div).when.apply(1,2).to.have.result(1/2)\r\nexpect(div).when.apply(1,0).to.throw()\r\n```\r\n\r\n### assert `exception`\r\n```python\r\nwith expect.exception():\r\n    assert 1 == 2\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}